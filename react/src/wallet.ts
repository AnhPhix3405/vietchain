import { DirectSecp256k1HdWallet } from "@cosmjs/proto-signing";
import { BLOCKCHAIN_CONFIG } from "./config/blockchain";
import CryptoJS from "crypto-js";

export async function createNewWallet() {
  // T·∫°o wallet v·ªõi 24 t·ª´ thay v√¨ 12 t·ª´
  const wallet = await DirectSecp256k1HdWallet.generate(24, { // üÜï Thay ƒë·ªïi t·ª´ 12 th√†nh 24
    prefix: BLOCKCHAIN_CONFIG.addressPrefix, // "myphi" thay v√¨ "cosmos"
  });
  
  const accounts = await wallet.getAccounts();
  return {
    mnemonic: wallet.mnemonic,
    address: accounts[0].address,
    wallet, // Return wallet object ƒë·ªÉ s·ª≠ d·ª•ng ti·∫øp
  };
}

export async function importWalletFromMnemonic(mnemonic: string) {
  try {
    const wallet = await DirectSecp256k1HdWallet.fromMnemonic(mnemonic, {
      prefix: BLOCKCHAIN_CONFIG.addressPrefix,
    });
    
    const accounts = await wallet.getAccounts();
    return {
      mnemonic: wallet.mnemonic,
      address: accounts[0].address,
      wallet,
    };
  } catch (error) {
    throw new Error("Invalid mnemonic phrase");
  }
}

export function validateMnemonic(mnemonic: string): boolean {
  // üÜï Th√™m check cho undefined/null
  if (!mnemonic || typeof mnemonic !== 'string') {
    throw new Error('Mnemonic is required and must be a string');
  }

  const trimmedMnemonic = mnemonic.trim();
  
  if (!trimmedMnemonic) {
    throw new Error('Mnemonic cannot be empty');
  }

  const words = trimmedMnemonic.split(/\s+/);
  
  if (words.length !== 12 && words.length !== 24) {
    throw new Error('Mnemonic must be 12 or 24 words');
  }

  return true;
}

// Helper function to format mnemonic for display
export function formatMnemonicForDisplay(mnemonic: string): string[] {
  return mnemonic.trim().split(/\s+/);
}

// Helper function to generate a secure random mnemonic
export async function generateSecureMnemonic(): Promise<string> {
  const wallet = await DirectSecp256k1HdWallet.generate(24, { // üÜï Thay ƒë·ªïi t·ª´ 12 th√†nh 24
    prefix: BLOCKCHAIN_CONFIG.addressPrefix,
  });
  return wallet.mnemonic;
}

// H√†m m√£ h√≥a mnemonic v·ªõi spending password
export function encryptMnemonic(mnemonic: string, password: string): string {
  return CryptoJS.AES.encrypt(mnemonic, password).toString();
}

// H√†m gi·∫£i m√£ mnemonic t·ª´ spending password
export function decryptMnemonic(encryptedMnemonic: string, password: string): string | null {
  try {
    const bytes = CryptoJS.AES.decrypt(encryptedMnemonic, password);
    const decrypted = bytes.toString(CryptoJS.enc.Utf8);
    
    if (!decrypted) {
      throw new Error('Decryption failed');
    }
    
    return decrypted;
  } catch (error) {
    console.error('Failed to decrypt mnemonic:', error);
    return null;
  }
}

// H√†m t·∫°o wallet v√† m√£ h√≥a ngay
export async function createWalletWithPassword(password: string) {
  const walletData = await createNewWallet();
  const encryptedMnemonic = encryptMnemonic(walletData.mnemonic, password);
  
  return {
    ...walletData,
    encryptedMnemonic,
    // üÜï Tr·∫£ v·ªÅ mnemonic ƒë·ªÉ hi·ªÉn th·ªã cho user backup
    mnemonic: walletData.mnemonic, // ‚úÖ Gi·ªØ l·∫°i ƒë·ªÉ hi·ªÉn th·ªã
  };
}

// H√†m import wallet v√† m√£ h√≥a
export async function importWalletWithPassword(mnemonic: string, password: string) {
  const walletData = await importWalletFromMnemonic(mnemonic);
  const encryptedMnemonic = encryptMnemonic(mnemonic, password);
  
  return {
    ...walletData,
    encryptedMnemonic,
    mnemonic: undefined, // Kh√¥ng tr·∫£ v·ªÅ plain text
  };
}

// H√†m kh√¥i ph·ª•c wallet t·ª´ encrypted mnemonic
export async function restoreWalletFromPassword(encryptedMnemonic: string, password: string) {
  const mnemonic = decryptMnemonic(encryptedMnemonic, password);
  
  if (!mnemonic) {
    throw new Error('Incorrect password or corrupted data');
  }
  
  return await importWalletFromMnemonic(mnemonic);
}